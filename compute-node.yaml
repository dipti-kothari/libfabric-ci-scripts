# Any update to this template requires manually updating the template in the following
# three buckets LibfbaricCI-Compute-Node-Template, HpcCI-Compute-Node-Template,
# Installer-Compute-Node-Template in libfabric-ci, hpc-ci and installer-pipeline
# account respectively
AWSTemplateFormatVersion: 2010-09-09

Parameters:
    StackName:
        Description: Name for this service; used in cloud formation name
        Type: String
    JobType:
        Description: JobType will help us in defining specific parameters for a particular job
        Type: String
        AllowedValues:
            - PR
            - EFAInstallerProdCanary
            - LibfabricMasterCanary
            - EFAInstallerPipeline
    SubnetId:
        Description: Subnet ID for EBS and Instances
        Type: AWS::EC2::Subnet::Id
    SecurityGroup:
        Description: SecurityGroup for compute nodes
        Type: String
        Default: None
    ComputeInstanceType:
        Description: Instance type for compute node
        Type: String
        Default: None
    AMI:
        Description: Amazon Linux Image for root node
        Type: String
        Default: None
    KeyName:
        Description: SSh key used to launch the instance
        Type: String
        Default: None
    Workspace:
        Description: Unique path to the Jenkins Workspace/Codebuild ARN, used to tag resources
        Type: String
        Default: None
    BuildNumber:
        Description: Code Build/Jenkins run number, used to tag resources
        Type: String
        Default: None
    NetworkInterfaceType:
        Description: Type of Interface, default is None. Set efa to create EFA enabled instances
        Type: String
        Default: None
    PlacementGroup:
        Description: Placement Group Id
        Type: String
        Default: None
    EBSVolumeId:
        Description: EBS Volume shared between nodes
        Type: String
        Default: None
    TargetBranch:
        Description: Libfabric PR branch required for PR jobs
        Type: String
        Default: None
    Label:
        Description: Operating System label for the job
        Type: String
        Default: None
    TestSkipKmod:
        Description: Flag for EFA Installer
        Type: Number
        Default: 0
    RunImpiTest:
        Description: Install Intel MPI and run osu test with Intel MPI
        Type: Number
        Default: 0
    CanarySubJob:
        Description: SubJob of InstallerCanary
        Type: String
        Default: None
        AllowedValues:
            - multinode
            - minimal
            - skipkmod
            - upgrade
            - None
    EFAInstallerVersion:
        Description: EFAInstaller Version to download
        Type: String
        Default: latest
Metadata: {}
Conditions:
    IfEFA: !Equals [!Ref 'NetworkInterfaceType', efa]
    IfNoEFA: !Not
        - !Condition IfEFA
Resources:
    EFANetworkInterfaceCompute:
        Type: AWS::EC2::NetworkInterface
        Condition: IfEFA
        Properties:
            InterfaceType: efa
            GroupSet:
                - !Ref SecurityGroup
            SubnetId: !Ref 'SubnetId'
            Tags:
                - Key: Workspace
                  Value: !Ref Workspace
                - Key: Build_Number
                  Value: !Ref BuildNumber
    DefaultNetworkInterfaceCompute:
        Type: AWS::EC2::NetworkInterface
        Condition: IfNoEFA
        Properties:
            GroupSet:
                - !Ref SecurityGroup
            SubnetId: !Ref 'SubnetId'
            Tags:
                - Key: Workspace
                  Value: !Ref Workspace
                - Key: Build_Number
                  Value: !Ref BuildNumber
    ComputeNode:
        Type: 'AWS::EC2::Instance'
        Metadata:
            AWS::CloudFormation::Init:
              config:
                packages:
                  yum:
                    awslogs: []
                files:
                  "/etc/awslogs/awslogs.conf":
                    content: !Sub |
                      [general]
                      state_file= /var/awslogs/state/agent-state
                    mode: '000400'
                    owner: root
                    group: root
                  "/etc/awslogs/awscli.conf":
                    content: !Sub |
                      [plugins]
                      cwlogs = cwlogs
                      [default]
                      region = ${AWS::Region}
                    mode: '000400'
                    owner: root
                    group: root
                commands:
                  01_create_state_directory:
                    command: "mkdir -p /var/awslogs/state"
                services:
                  sysvinit:
                    awslogs:
                      enabled: 'true'
                      ensureRunning: 'true'
        CreationPolicy:
            ResourceSignal:
              Timeout: PT30M
        Properties:
            InstanceType: !Ref 'ComputeInstanceType'
            ImageId: !Ref 'AMI'
            KeyName: !Ref 'KeyName'
            Volumes:
                - Device: xvdh
                  VolumeId: !Ref EBSVolumeId
            Tags:
                - Key: Workspace
                  Value: !Ref Workspace
                - Key: Build_Number
                  Value: !Ref BuildNumber
                - Key: Node
                  Value: Compute
            PlacementGroupName: !Ref PlacementGroup
            NetworkInterfaces:
                - NetworkInterfaceId: !If [IfEFA, !Ref EFANetworkInterfaceCompute, !Ref DefaultNetworkInterfaceCompute]
                  DeviceIndex: 0
            UserData:
                Fn::Base64:
                    Fn::Sub:
                      - |
                        #!/bin/bash -e
                        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                        set -x -v -e
                        install_cmd=yum
                        if [[ ${Label} == ubuntu* ]]; then
                            install_cmd=apt-get
                            UUID=$(sudo blkid | grep nvme1n1 | sed 's/\s\s*/ /g' | cut -d" " -f2 | cut -d"\"" -f2)
                        else
                            UUID=$(sudo blkid | grep nvme1n1 | sed 's/\s\s*/ /g' | cut -d" " -f8)
                        fi
                        UUID="UUID=$UUID"
                        $install_cmd update -y aws-cfn-bootstrap
                        /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} \
                            --resource ComputeNode \
                            --region ${AWS::Region}
                        cfn_signal_on_exit()
                        {
                            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \
                                --resource ComputeNode \
                                --region ${AWS::Region}
                        }
                        trap cfn_signal_on_exit EXIT
                        ouput_dir_path=${HOME}/output_dir
                        mkdir $ouput_dir_path
                        sudo $install_cmd -y install xfsprogs
                        install_dir="/shared"
                        sudo mkdir $install_dir
                        sudo mount /dev/xvdh $install_dir
                        sudo chmod 777 /etc/fstab
                        echo "$UUID /shared  xfs  defaults,nofail,nobootwait  0  2" >> /etc/fstab
                        sudo chmod 600 /etc/fstab
                        cd $install_dir/libfabric-ci-scripts
                        ./kernel-upgrade ${Label}
                        ./install-os-dep.sh ${Label} "update"
                        if [[ ${NetworkInterfaceType} == "efa" ]]; then
                            ./install-efa.sh $install_dir ${TestSkipKmod} ${EFAInstallerVersion} ${TargetBranch} | tee $ouput_dir_path/install-efa.txt
                        fi
                        ./ptrace-ubuntu.sh ${TargetBranch} ${Label}
                        ./install-os-dep.sh ${Label} "install_deps"
                        if [[ ${job_type} == "PR" ]] && [[ ${TargetBranch} == "v1.8.x" ]]; then
                            . install-libfabric-1.8.sh $install_dir
                        else
                            . install-libfabric.sh $install_dir ${job_type}
                        fi
                        if [[ ${RunImpiTest} -eq 1 ]] && [[ ${NetworkInterfaceType} == "efa" ]]; then
                            pushd $install_dir/l_mpi_2019.7.217
                            sudo ./install.sh -s accept.cfg
                            popd
                        fi
                        . install-fabtests.sh $install_dir ${NetworkInterfaceType} $LIBFABRIC_INSTALL_PATH
                      - job_type: !Ref 'JobType'
Outputs:
    ComputeInstanceId:
        Description: Logical Id for compute instance
        Value: !Ref ComputeNode
